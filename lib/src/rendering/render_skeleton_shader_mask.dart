import 'package:flutter/rendering.dart';

/// This is typically a [RenderShaderMask] with few adjustments
///
/// it takes shader info by setters instead of the widget
class RenderSkeletonShaderMask extends RenderProxyBox {
  /// Creates a render object that applies a mask generated by a [Shader] to its child.

  RenderSkeletonShaderMask({
    RenderBox? child,
  }) : super(child);

  @override
  ShaderMaskLayer? get layer => super.layer as ShaderMaskLayer?;

  /// The shader to be used
  set shader(Shader? value) {
    if (_shader != value) {
      _shader = value;
    }
  }

  Shader? _shader;

  /// The shader mask to be used
  set maskRect(Rect? value) {
    if (_maskRect != value) {
      _maskRect = value;
    }
  }

  Rect? _maskRect;

  /// The [BlendMode] to use when applying the shader to the child.
  ///
  /// The default, [BlendMode.modulate], is useful for applying an alpha blend
  /// to the child. Other blend modes can be used to create other effects.
  BlendMode get blendMode => _blendMode;
  BlendMode _blendMode = BlendMode.srcATop;

  set blendMode(BlendMode value) {
    if (_blendMode == value) {
      return;
    }
    _blendMode = value;
  }

  @override
  bool get alwaysNeedsCompositing => child != null;

  @override
  void paint(PaintingContext context, Offset offset) {
    if (child != null && _shader != null) {
      assert(needsCompositing);
      layer ??= ShaderMaskLayer();
      layer!
        ..shader = _shader
        ..maskRect = _maskRect
        ..blendMode = _blendMode;
      context.pushLayer(layer!, super.paint, offset);
      assert(() {
        layer!.debugCreator = debugCreator;
        return true;
      }());
    } else {
      layer = null;
    }
  }
}
